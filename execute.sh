#!/bin/bash
#==========================================================================
#    MQTT-fuzzware: An open source testbed for evaluating MQTT fuzzers.
#    Copyright (C) 2020 Luis Gustavo Araujo Rodriguez, from Honduras C.A.
#
#    This file is part of MQTT-fuzzware.
#
#    MQTT-fuzzware is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    MQTT-fuzzware is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with MQTT-fuzzware.  If not, see <https://www.gnu.org/licenses/>.
#==========================================================================

[ $# != 1 ] && (echo "Usage: ./execute.sh <STOPPING_CRITERION>"; echo "OPTION: time | packets") && exit 1

source fuzz.cfg

case $1 in

	"time")
		STOPPING_CRITERION=("${FUZZING_CAMPAIGN[@]}");;

	"packets")

		STOPPING_CRITERION=("${PACKETS[@]}");;

		*)
			echo "Stopping criterion is unavailable" && exit 1;;

esac

echo "Configuring IP tables for Scapy..."
iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROP

echo "Setting up output directories in host..."
sudo -u luis ./setup-host.sh $1

#FOR LOOP FOR EACH FUZZER
for (( i=0; i<${#STOPPING_CRITERION[@]}; i++ ))
do
	for (( j=1; j<=$TRIALS; j++ ))
	do

		for (( k=0; k<${#BROKER_VERSION[@]}; k++ ))
		do

			[[ $1 == "time" ]] && echo "Preparing to fuzz ${BROKER_VERSION[k]} for ${STOPPING_CRITERION[i]} seconds using $MQTT_FUZZER (trial $j)..."
			[[ $1 == "packets" ]] && echo "Preparing to fuzz ${BROKER_VERSION[k]} until reaching ${STOPPING_CRITERION[i]} packets using $MQTT_FUZZER (trial $j)..."
			if [[ $MQTT_FUZZER == "casteur" ]]; then
				echo "Configuring environment for using $MQTT_FUZZER fuzzer..."
				[ -f "$FUZZER_DIR/payloads.txt" ] && rm "$FUZZER_DIR/payloads.txt" 
				[ -f "$FUZZER_DIR/packets.txt" ] && rm "$FUZZER_DIR/packets.txt" 
				[ -f "$FUZZER_DIR/formatted_packets.txt" ] && rm "$FUZZER_DIR/formatted_packets.txt" 
				
				echo "Generating packets for $MQTT_FUZZER fuzzer..."
				cd "$FUZZER_DIR/PacketsGenerator/v1/"
				python3.7 scenarios_generator.py ./../../payloads.txt 100000
				echo "Done generating packets."

				echo "Formatting packets generated by $MQTT_FUZZER fuzzer..."
				cd "$FUZZER_DIR"
				python3.7 format_packets.py
				echo "Done formatting packets."
				echo "Done configuring environment for $MQTT_FUZZER fuzzer."
			elif [[ $MQTT_FUZZER == "dipaolo" ]]; then
                                echo "Configuring environment for using $MQTT_FUZZER fuzzer..."
				[ -f "$FUZZER_DIR/packets_generated/packets.json" ] && rm "$FUZZER_DIR/packets_generated/packets.json" 
				
				echo "Generating packets for $MQTT_FUZZER fuzzer..."
				cd "$FUZZER_DIR"
                                python3.7 packetGenerator.py -g 500 -o packets.json
				echo "Done generating packets."
				echo "Done configuring environment for $MQTT_FUZZER fuzzer."
			fi

			cd $SCRIPT_DIR

			#RESTART VM FOR EACH TRIAL
			echo "Restarting VM..."
			sudo -u luis vagrant reload $TARGET
			
			echo "Starting tshark..."
			[[ $1 == "time" ]] && sudo -u luis tshark -i $VM_INTERFACE -f "$CAPTURE_FILTER" -a duration:$(( ${STOPPING_CRITERION[i]} + 45 )) -w "$OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/packets-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.pcap" -q &
			[[ $1 == "packets" ]] && sudo -u luis tshark -i $VM_INTERFACE -f "$CAPTURE_FILTER" -c "${STOPPING_CRITERION[i]}" -w "$OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/packets-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.pcap" -q & TSHARK_PROCESS=$!
			
			echo "Waiting 30 seconds for tshark to begin capturing..."
			sleep 30s
		
			echo "Retrieving broker configurations if necessary..."
			if [[ $BROKER_VERSION == "mosquitto-2.0"* ]]; then
				BROKER_CONFIG="-c $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/mosquitto.conf"
                        else
                                BROKER_CONFIG=""
                        fi
	
			echo "Starting broker..."
			sudo -u luis vagrant ssh $TARGET -c "(nohup sh -c '$BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/${BROKER_EXEC[k]} $BROKER_CONFIG') > $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}-$j.out & sleep 1"
			
			[[ ${BROKER_VERSION[k]} == "moquette"* ]] && echo "Waiting for ${BROKER_VERSION[k]} to COMPLETELY start..." && sleep 10s #NEED THIS TO WAIT FOR MOQUETTE BROKER TO COMPLETELY START

			echo "Starting fuzzer..."
			case $MQTT_FUZZER in

				"fsecure") #F-SECURE (2015)
					cd $FUZZER_DIR
					python mqtt_fuzz.py $TARGET_IP 1883 & FUZZ_PROCESS=$! && SECONDS=0;;

				"aichernig") #LEARNING BASED FUZZING (2021)
					cd $FUZZER_DIR
					java -Xmx64m -Dorg.gradle.appname=gradlew -classpath $FUZZER_DIR/gradle/wrapper/gradle-wrapper.jar org.gradle.wrapper.GradleWrapperMain learningBasedFuzzing & FUZZ_PROCESS=$! && SECONDS=0;;

				"casteur") #SCENARIO BASED FUZZING (2020)
					cd $FUZZER_DIR
					python3.7 casteur_fuzz.py & FUZZ_PROCESS=$! && SECONDS=0;;

				"mqttgram") #GRAMMAR (2020)
					cd $FUZZER_DIR
					python3.7 fuzz.py -g & FUZZ_PROCESS=$! && SECONDS=0;;

				"scapy") #SCAPY BUILT-IN FUZZER
					cd $FUZZER_DIR
					python3.7 fuzz.py -s & FUZZ_PROCESS=$! && SECONDS=0;;

				"mqttgram5") #GRAMMAR MQTT 5.0 (2021)
					cd $FUZZER_DIR
					python3.7 fuzz.py -v & FUZZ_PROCESS=$! && SECONDS=0;;
				
				"dipaolo") #SCENARIO BASED FUZZING (2021)
					cd $FUZZER_DIR
					python3.7 tester.py --host $TARGET_IP --port 1883 --packets "$FUZZER_DIR/packets_generated/packets.json" & FUZZ_PROCESS=$! && SECONDS=0;;

                                "mqttgramh") #GRAMMAR MQTT 3.1.1 and 5.0 (2021)
                                        cd $FUZZER_DIR
					python3.7 fuzz.py -h & FUZZ_PROCESS=$! && SECONDS=0;;

                                
				"fume") #BPEARSON (2021)
                                        cd $FUZZER_DIR
					python3.8 fuzz.py & FUZZ_PROCESS=$! && SECONDS=0;;

				*)
					echo "MQTT Fuzzer is unavailable"
					exit 1;;
	
			esac

			while true
			do
				[[ $1 == "time" ]] && [[ $SECONDS -ge ${STOPPING_CRITERION[i]} ]] && CRASH=FALSE && break
				[[ $1 == "packets" ]] && [[ $(ps -p $TSHARK_PROCESS) && $? -ne 0 ]] && CRASH=FALSE && break

				ps cax | grep $FUZZ_PROCESS #CHECKS IF LAST PYTHON INSTANCE EXECUTED IS ALIVE
				if [ $? -eq 0 ]
				then
					continue
				else
					CRASH=TRUE
					echo "$MQTT_FUZZER or ${BROKER_VERSION[k]} crashed in approximately $SECONDS seconds (trial $j)" >> $OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/crashes.out
					echo "Generating ${BROKER_VERSION[k]} crash log and resetting trial $j..." 
					sudo -u luis vagrant ssh $TARGET -c "sudo pkill ${BROKER_PROCESS[k]} && cat $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}-$j.out >> $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/blog-crash.out && cp $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/blog-crash.out /vagrant_data/ && sleep 1 && rm $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/*.out && /vagrant/mqtt_fuzzers/phd/experiments/compile-broker.sh $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}"
					cat "../../output/broker/blog-crash.out" >> "$OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/crashes.out" && rm "../../output/broker/blog-crash.out" && echo "CRASH LOG DONE"
					sudo kill $FUZZ_PROCESS  #JUST TO MAKE SURE IT IS KILLED
                                        sudo pkill python3.7 #ANOTHER TO MAKE SURE THE EXECUTION OF THE FUZZER ENDED.
					sudo pkill tshark; sudo pkill dumpcap #KILL TSHARK AND CAPTURE PROCESS
					break
					
				fi
			done

			if [[ $1 == "time" && "$SECONDS" -ge "${STOPPING_CRITERION[i]}" && $CRASH = FALSE ]] || [[ $1 == "packets" && $(tshark -r "$OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/packets-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.pcap" | wc -l) -ge "${STOPPING_CRITERION[i]}" && $CRASH = FALSE ]]
			then
				echo "Stopping fuzzer $MQTT_FUZZER..." && (ps -p $FUZZ_PROCESS -o %cpu,%mem,cmd; echo "NO CRASH (SECONDS:$SECONDS ${1^^}: ${STOPPING_CRITERION[i]})") > "$OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/flog-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.out" && sudo kill $FUZZ_PROCESS
				
				echo "Stopping broker ${BROKER_VERSION[k]}..." && sudo -u luis vagrant ssh $TARGET -c "ps -C ${BROKER_PROCESS[k]} -o %cpu,%mem,cmd > $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/blog-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.out && sudo pkill ${BROKER_PROCESS[k]} && cat $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}-$j.out >> $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/blog-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.out && rm $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}-$j.out && /vagrant/mqtt_fuzzers/phd/experiments/measure-coverage-broker.sh $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]} >> $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/blog-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.out && sleep 2 && cp $BROKER_DIR/${STOPPING_CRITERION[i]}/trial$j/blog-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.out /vagrant_data/ && sleep 1"
				
				echo "Sending ${BROKER_VERSION[k]} log to output directory..." && mv "../../output/broker/blog-$MQTT_FUZZER-${STOPPING_CRITERION[i]}-${BROKER_VERSION[k]}-TRIAL$j.out" "$OUTPUT_DIR/${STOPPING_CRITERION[i]}/trial$j/${BROKER_VERSION[k]}/" && echo "DONE"

			else
				(( k-- )) && echo "FUZZER RESET DONE!" #DO TRIAL AGAIN

			fi

		done
	done
done
